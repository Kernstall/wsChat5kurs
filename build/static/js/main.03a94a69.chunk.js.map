{"version":3,"sources":["components/RoomList.js","components/Message.js","components/Chat.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["RoomList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","data","setState","obj","fetch","method","then","response","json","classes","react_default","a","createElement","className","root","GridList_default","gridList","cols","cellHeight","map","tile","GridListTile_default","key","name","src","imgSrc","alt","GridListTileBar_default","title","titleBar","actionIcon","IconButton_default","onClick","window","location","replace","concat","wsConnect","Message_default","icon","React","Component","withStyles","theme","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","width","height","color","objectSpread","mixins","gutters","paddingTop","spacing","unit","paddingBottom","border-radius","event","type","Paper_default","elevation","Typography_default","variant","component","align","message","Chat","addMessage","messageList","toConsumableArray","handleMessage","ws","send","JSON","stringify","handleNameChange","target","value","handleMessageChange","onFileLoad","e","file","console","log","result","socket","WebSocket","match","params","port","close","_this2","addEventListener","parse","_this3","container","index","components_Message","Dialog_default","aria-labelledby","DialogTitle_default","id","DialogContent_default","TextField_default","label","textField","onChange","margin","DialogActions_default","Button_default","handleSubmit","disabled","bottom","messageField","overflowY","overflowX","position","border","&$last-child","background-color","borderRadius","flexGrow","grow","menuButton","marginLeft","marginRight","headerLinkContainer","pointer","cursor","AppBar_default","Toolbar_default","aria-label","App","components_Header","Switch","Route","exact","path","Boolean","hostname","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03a94a69.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: '800px',\r\n    height: '700',\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n});\r\n\r\nclass RoomList extends React.Component {\r\n\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      open: false,\r\n      data: []\r\n    };\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({ open: false });\r\n  }\r\n\r\n  componentWillMount(){\r\n    const a = (obj) => {\r\n      fetch('/api/roomList', { method: 'GET' })//https://127.0.0.1:8081\r\n        .then(function (response) {\r\n          return response.json();\r\n        })\r\n        .then(function (data) {\r\n          obj.setState({data});\r\n        })\r\n    };\r\n    /*fetch(\"/app\", { method: 'GET' }).then(function (response) {\r\n      console.log(response);\r\n    });*/\r\n    /*fetch(\"/app\", { method: 'GET' }).then(function (response) {\r\n      console.log(response);\r\n    });*/\r\n    a(this);\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {data} = this.state;\r\n    return (\r\n      <div className={classes.root}>\r\n        <GridList className={classes.gridList} cols={1} cellHeight={200}>\r\n          { data && data.map(tile => (\r\n            <GridListTile key={tile.name}>\r\n              <img src={tile.imgSrc} alt={tile.name} />\r\n              <GridListTileBar\r\n                title={tile.name}\r\n                classes={{\r\n                  root: classes.titleBar,\r\n                  title: classes.title,\r\n                }}\r\n                actionIcon={\r\n                  <IconButton onClick = { () => window.location.replace(`/chat/${ tile.wsConnect }`) }>\r\n                    <MessageIcon className={classes.icon} />\r\n                  </IconButton>\r\n                }\r\n              />\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n        {/*<img src={ 'https://cdn.pixabay.com/photo/2016/06/18/17/42/image-1465348_960_720.jpg' } />\r\n        <img src={ 'https://www.w3schools.com/w3images/fjords.jpg' } />\r\n        <img src={ 'https://www.w3schools.com/w3images/fjords.jpg' } />*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(RoomList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    ...theme.mixins.gutters(),\r\n    paddingTop: theme.spacing.unit * 2,\r\n    paddingBottom: theme.spacing.unit * 2,\r\n    'border-radius': 0,\r\n  },\r\n});\r\n\r\nfunction Message(props) {\r\n  const { classes, event } = props;\r\n\r\n  return (\r\n    <div>\r\n      { event.type === 'message' ? <Paper className={classes.root} elevation={1}>\r\n        <Typography variant=\"h5\" component=\"h3\" align=\"left\">\r\n          {event.name}\r\n        </Typography>\r\n        <Typography component=\"p\" align=\"left\">\r\n          {event.message}\r\n        </Typography>\r\n      </Paper> : event.message}\r\n    </div>\r\n  );\r\n}\r\n\r\nMessage.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  event: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Message);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Button from '@material-ui/core/Button';\r\nimport Message from \"./Message\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Upload from 'material-ui-upload/Upload';\r\n\r\nconst styles = {\r\n  textField: {\r\n    width: 200,\r\n  },\r\n  messageField: {\r\n    width: 'fill-available'\r\n  },\r\n  container: {\r\n    width: 700,\r\n    margin: 'auto',\r\n    'border-radius': 0,\r\n    'height': '665px',\r\n    overflowY: 'auto',\r\n    overflowX: 'hidden'\r\n  },\r\n  bottom: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    width: 700,\r\n    border: '1px solid #AAAAAA',\r\n    display: 'flex',\r\n\r\n  },\r\n  map: {\r\n    '&$last-child': {\r\n      'background-color': 'red',\r\n    },\r\n  },\r\n  paper: {\r\n    borderRadius: 0\r\n  }\r\n};\r\n\r\nclass Chat extends React.Component {\r\n\r\n  propTypes = {\r\n    params: PropTypes\r\n  };\r\n\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      name: 'anonymous',\r\n      open: true,\r\n      ws: null,\r\n      messageList: [],\r\n      message: ''\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    const socket = new WebSocket(`ws://localhost:${ this.props.match.params.port }`);\r\n    this.setState({ ws: socket }) \r\n  }\r\n\r\n  componentWillUnmount() {/*\r\n    alert('test');\r\n    console.log('test');*/\r\n    //this.state.ws.send(JSON.stringify({type: 'disconnect', name: this.state.name}));\r\n    this.state.ws.close();\r\n  }\r\n\r\n  addMessage = (message) => {\r\n    this.setState({ messageList: [...this.state.messageList, message] });\r\n  };\r\n\r\n  handleSubmit() {\r\n    this.state.ws.addEventListener('message', (event) => {\r\n      this.addMessage(JSON.parse(event.data));\r\n    });\r\n    this.state.ws.send(JSON.stringify({type: 'greetings', name: this.state.name}));\r\n    this.setState({ open: false });\r\n  }\r\n\r\n  handleMessage = () => {\r\n    this.state.ws.send(JSON.stringify({type: 'message', name: this.state.name, message: this.state.message }));\r\n    this.setState({ message: ''});\r\n  };\r\n\r\n  handleNameChange = (event) => {\r\n    this.setState({name: event.target.value });\r\n  };\r\n\r\n  handleMessageChange = (event) => {\r\n    this.setState({message: event.target.value });\r\n  };\r\n\r\n  onFileLoad = (e, file) => console.log(e.target.result, file.name);\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <Paper className={ classes.container }>\r\n        <div className={ classes.map }>\r\n        {this.state.messageList.map((message, index) => <Message key={index} event={ message }/> )}\r\n        </div>\r\n        <Dialog\r\n          open={this.state.open}\r\n          aria-labelledby=\"scroll-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"scroll-dialog-title\">Choose your nick</DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              id=\"standard-name\"\r\n              label=\"Name\"\r\n              className={classes.textField}\r\n              value={this.state.name}\r\n              onChange={this.handleNameChange}\r\n              margin=\"normal\"\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => this.handleSubmit()} color=\"primary\" disabled={ this.state.name === '' }>\r\n              Ок\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <div className={ classes.bottom }>\r\n          <TextField\r\n            id=\"input\"\r\n            className={classes.messageField}\r\n            value={this.state.message}\r\n            onChange={this.handleMessageChange}\r\n            margin=\"normal\"\r\n          />\r\n          {/*<Upload label=\"Add\" onFileLoad={this.onFileLoad}/>*/}\r\n          <Button onClick={() => this.handleMessage()} color=\"primary\" disabled={ this.state.message === '' }>\r\n            Отправить\r\n          </Button>\r\n        </div>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Chat);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Link} from \"react-router-dom\";\r\n//import MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  headerLinkContainer: {\r\n    width: 100\r\n  },\r\n  pointer: {\r\n    cursor: 'pointer'\r\n  }\r\n};\r\n\r\nfunction Header(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n            {/*<MenuIcon />*/}\r\n          </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n              <span className={ classes.pointer } onClick={ () => window.location.replace('/') } >wsChat</span>\r\n            </Typography>{/*\r\n          <Button color=\"inherit\">Login</Button>*/}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Header);","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom'\n\nimport RoomList from './components/RoomList';\nimport Chat from './components/Chat';\nimport Header from './components/Header'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route exact path='/' component={RoomList}/>\n          <Route exact path='/chat/:port' component={Chat}/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}